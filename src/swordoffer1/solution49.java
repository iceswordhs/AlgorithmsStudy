package swordoffer1;

/**
 * @author Hs
 * @Date 2021/10/29 19:45
 */

/**
 * 我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。
 *
 * 思路：丑数只包含因子 2, 3, 5，所以可以推出丑数只能通过原来的丑数*2，*3，*5得到；
 *      所以，我们将原来的丑数*2，*3，*5，对于每个丑数来说，我们都要将它*2，*3，*5，这样才能不漏掉丑数
 *      但是出现了一个问题。那就是*2得到的丑数有可能比*3的得到的丑数还大
 *      比如，5*3，12*2,因此用a，b，c分别记录前几个丑数*2，*3，*5了
 *      对于下一个丑数，我们不知道它是*2，*3还是*5得到，但是一定是这3种情况的一种
 *      所以，判断了是哪一种情况，对应的数就++，但是有可能出现既是*2，又是*3的数，这时对应的数都要++
 */
public class solution49 {
    public int nthUglyNumber(int n) {
        int[] dp = new int[n];  // 使用dp数组来存储丑数序列
        dp[0] = 1;  // dp[0]已知为1
        int a = 0, b = 0, c = 0;    // 下个应该通过乘2来获得新丑数的数据是第a个， 同理b, c

        for(int i = 1; i < n; i++){
            // 第a丑数个数需要通过乘2来得到下个丑数，第b丑数个数需要通过乘2来得到下个丑数，同理第c个数
            int n2 = dp[a] * 2, n3 = dp[b] * 3, n5 = dp[c] * 5;
            dp[i] = Math.min(Math.min(n2, n3), n5);
            if(dp[i] == n2){
                a++; // 第a个数已经通过乘2得到了一个新的丑数，那下个需要通过乘2得到一个新的丑数的数应该是第(a+1)个数
            }
            if(dp[i] == n3){
                b++; // 第 b个数已经通过乘3得到了一个新的丑数，那下个需要通过乘3得到一个新的丑数的数应该是第(b+1)个数
            }
            if(dp[i] == n5){
                c++; // 第 c个数已经通过乘5得到了一个新的丑数，那下个需要通过乘5得到一个新的丑数的数应该是第(c+1)个数
            }
        }
        return dp[n-1];
    }
}
