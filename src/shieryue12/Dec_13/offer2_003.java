package shieryue12.Dec_13;

/**
 * @author Hs
 * @Date 2021/12/13 22:23
 */

/**
 * 给定一个非负整数 n ，请计算 0 到 n 之间的每个数字的二进制表示中 1 的个数，并输出一个数组。
 *
 * 思路：一个一个计算 使用x&(x-1)或者x&-x一个一个的去掉最低位的1，直到x为0
 *
 * 思路2：动态规划
 * 奇数：二进制表示中，奇数一定比前面那个偶数多一个 1，因为多的就是最低位的 1。
 * 偶数：二进制表示中，偶数中 1 的个数一定和除以 2 之后的那个数一样多。
 *      因为最低位是 0，除以 2 就是右移一位，也就是把那个 0 抹掉而已，所以 1 的个数是不变的
 *      dp[i] = dp[i-1]，当i为奇数
 *      dp[i] = dp[i/2]，当i为偶数
 *      可以合并为dp[i] = dp[i/2] + i % 2
 *      优化为dp[i] = dp[i>>1] + i&1
 */
public class offer2_003 {
    public int[] countBits(int n) {
        int[] res=new int[n+1];
        for(int i=0;i<=n;i++){
            res[i] = res[i>>1] + (i&1);
        }
        return res;
    }
}
